sal_df %>%
ggplot(aes(x= 1:length(sal_df$slice),y = Cont))+
geom_col()+
xlab("slices")+ylab("Contamination per slice log CFU/g")
#Prevalence of contaminated salmons. Prevalence went up to 82%.
sum(sal_df$Cont>0)/ length(sal_df$Cont)
sal_df<-data.frame(
slice = rep(1:40, 100),
salmon = rep(1:100, each=40) ,
Cont = 0
)
#Sample unique salmons or 10% prevalence
Contaminted_salmons<-sample(unique(sal_df$salmon), length(unique(sal_df$salmon))*0.1)
#adding contamination to Those contaminated salmons:
#random contamination for each salmon
for (i in Contaminted_salmons){
sal_df<-sal_df %>% mutate(Cont = ifelse(salmon == i, runif(1,2,4), Cont))
}
#Prevalence of contaminated salmons
sum(sal_df$Cont>0)/ length(sal_df$Cont)
#Grid of contaminations
sal_df %>%
ggplot(aes(x= 1:length(sal_df$slice),y = Cont))+
geom_col()+
xlab("slices")+ylab("Contamination per slice log CFU/g")
TR_B_S<-0.078
TR_S_B<-0.025
Salmon_cont<-sal_df$Cont
#in this case the blade has no contamination to start with. it will be solely a cross-contamination surface.
Blade_Vector<-rep(0,length(Salmon_cont))
Blade_Vector[1]<-0
for (i in 1:length(Blade_Vector)){
#Converting to CFU. As integer for now can be fixed later
CFU_Salmon_Cont<-as.integer(10^Salmon_cont[i])
CFU_Blade_Cont<-as.integer(10^Blade_Vector[i])
#Using binomial distribution to simulate transfer of cells
Tot_TR_S_blade<-rbinom(1,CFU_Salmon_Cont,TR_S_B)
Tot_TR_blade_S<-rbinom(1,CFU_Blade_Cont,TR_S_B)
New_Salmon_Cont <- CFU_Salmon_Cont-Tot_TR_S_blade+Tot_TR_blade_S
New_Blade_Cont <- CFU_Blade_Cont +Tot_TR_S_blade-Tot_TR_blade_S
if(New_Blade_Cont<0){
New_Blade_Cont<-0
}
Salmon_cont[i]<-log10(New_Salmon_Cont)
Blade_Vector[i+1]<-log10(New_Blade_Cont)
}
Salmon_cont<-ifelse(Salmon_cont == -Inf, 0, Salmon_cont )
sal_df$Cont<-Salmon_cont
sal_df %>%
ggplot(aes(x= 1:length(sal_df$slice),y = Cont))+
geom_col()+
xlab("slices")+ylab("Contamination per slice log CFU/g")
#Prevalence of contaminated salmons. Prevalence went up to 82%.
sum(sal_df$Cont>0)/ length(sal_df$Cont)
log10(0)
10^0
10^0.001
10^0.000001
#Sample unique salmons or 10% prevalence
Contaminted_salmons<-sample(unique(sal_df$salmon), length(unique(sal_df$salmon))*0.1)
#adding contamination to Those contaminated salmons:
#random contamination for each salmon
for (i in Contaminted_salmons){
sal_df<-sal_df %>% mutate(Cont = ifelse(salmon == i, runif(1,2,4), Cont))
}
#Prevalence of contaminated salmons
sum(sal_df$Cont>0)/ length(sal_df$Cont)
#Grid of contaminations
sal_df %>%
ggplot(aes(x= 1:length(sal_df$slice),y = Cont))+
geom_col()+
xlab("slices")+ylab("Contamination per slice log CFU/g")
sal_df<-data.frame(
slice = rep(1:40, 100),
salmon = rep(1:100, each=40) ,
Cont = 0
)
#Sample unique salmons or 10% prevalence
Contaminted_salmons<-sample(unique(sal_df$salmon), length(unique(sal_df$salmon))*0.1)
#adding contamination to Those contaminated salmons:
#random contamination for each salmon
for (i in Contaminted_salmons){
sal_df<-sal_df %>% mutate(Cont = ifelse(salmon == i, runif(1,2,4), Cont))
}
#Prevalence of contaminated salmons
sum(sal_df$Cont>0)/ length(sal_df$Cont)
#Grid of contaminations
sal_df %>%
ggplot(aes(x= 1:length(sal_df$slice),y = Cont))+
geom_col()+
xlab("slices")+ylab("Contamination per slice log CFU/g")
TR_B_S<-0.078
TR_S_B<-0.025
Salmon_cont<-sal_df$Cont
#in this case the blade has no contamination to start with. it will be solely a cross-contamination surface.
Blade_Vector<-rep(0,length(Salmon_cont))
Blade_Vector[1]<-0
for (i in 1:length(Blade_Vector)){
#Converting to CFU. As integer for now can be fixed later
CFU_Salmon_Cont<-as.integer(10^Salmon_cont[i])
CFU_Blade_Cont<-as.integer(10^Blade_Vector[i])
#Using binomial distribution to simulate transfer of cells
Tot_TR_S_blade<-rbinom(1,CFU_Salmon_Cont,TR_S_B)
Tot_TR_blade_S<-rbinom(1,CFU_Blade_Cont,TR_S_B)
New_Salmon_Cont <- CFU_Salmon_Cont-Tot_TR_S_blade+Tot_TR_blade_S
New_Blade_Cont <- CFU_Blade_Cont +Tot_TR_S_blade-Tot_TR_blade_S
Salmon_cont[i]<-log10(New_Salmon_Cont)
#adding new blade cont and guarding against 0 cells giving -inf
Blade_Vector[i+1]<-ifelse(log10(New_Blade_Cont) == 0, -1,log10(New_Blade_Cont) )
}
Salmon_cont<-ifelse(Salmon_cont == -Inf, 0, Salmon_cont )
sal_df$Cont<-Salmon_cont
sal_df %>%
ggplot(aes(x= 1:length(sal_df$slice),y = Cont))+
geom_col()+
xlab("slices")+ylab("Contamination per slice log CFU/g")
#Prevalence of contaminated salmons. Prevalence went up to 82%.
sum(sal_df$Cont>0)/ length(sal_df$Cont)
0.7^4
(1-1/4)^4
1-((9/16)^2 + (7/16)^2)
Ginig1<- 1-((1/3)^2 + (2/3)^2)
Ginil2<- 1-((7/9)^2+(2/9)^2)
Ginil3<- 1-((1/4)^2+(3/4)^2)
Ginig1
Ginil2
1-((1/4)^2+(3/4)^2)
Weighted_c = ((3/16)*0.4444444) + ((9/16)*0.345679 )+ ((4/16)*0.375)
((3/16)*0.4444444) + ((9/16)*0.345679 )+ ((4/16)*0.375)
load("C:/Users/gareyes3/Downloads/5.R.RData")
View(Xy)
#se bi
lm(y~X1+X2 data = Xy)
#se bi
lm(y~X1+X2 ,data = Xy)
#se bi
summary(lm(y~X1+X2 ,data = Xy))
#bootstrap
set.seed(432)
boot.fn <- function(data, index){
coef(lm(y~X1+X2 , data = data, subset = index))
}
boot.fn(Xy, 1:1000)
boot(data, boot.fn, 1000)
#bootstrap
library(boot)
boot(data, boot.fn, 1000)
boot(Xy, boot.fn, 1000)
#10 fold cv
cv.error.10 <- rep(0, 10)
for (i in 1:10) {
glm.fit <- glm(y~X1+X2, data = Xy)
cv.error.10[i] <- cv.glm(Xy, glm.fit, K = 10)$delta[1]
}
cv.error.10
cv.glm(Xy, glm.fit, K = 10)$delta[1]
cv.glm(Xy, glm.fit, K = 10)$delta[1]
cv.glm(Xy, glm.fit, K = 10)$delta[1]
cv.glm(Xy, glm.fit, K = 10)$delta[1]
cv.glm(Xy, glm.fit, K = 10)$delta[1]
cv.glm(Xy, glm.fit, K = 10)
cv.glm(Xy, glm.fit, K = 10)$delta[1]
cv.glm(Xy, glm.fit, K = 10)$delta[1]
cv.glm(Xy, glm.fit, K = 10)$delta[1]
cv.glm(Xy, glm.fit, K = 10)$delta[1]
cv.glm(Xy, glm.fit, K = 10)$delta
cv.glm(Xy, glm.fit, K = 10)$delta
cv.glm(Xy, glm.fit, K = 10)$delta
set.seed(432)
glm.fit <- glm(y~X1+X2, data = Xy)
cv.glm(Xy, glm.fit, K = 10)$delta[1]
set.seed(432)
glm.fit <- glm(y~X1+X2, data = Xy)
cv.glm(Xy, glm.fit, K = 10)$delta[1]
set.seed(432)
glm.fit <- glm(y~X1+X2, data = Xy)
cv.glm(Xy, glm.fit, K = 10)$delta[1]
library(boot)
set.seed(432)
boot.fn <- function(data, index){
coef(lm(y~X1+X2 , data = data, subset = index))
}
boot.fn(Xy, 1:1000)
boot(Xy, boot.fn, 1000)
knitr::opts_chunk$set(echo = TRUE)
library(tibble)     # data frame printing
library(dplyr)      # data manipulation
library(knitr)      # creating tables
library(kableExtra)
library(ISLR2)
library(boot)
set.seed(43208)
trn.boston.idx=sample(nrow(Boston),450)
boston.trn=Boston[trn.boston.idx,] # training data
boston.tst=Boston[-trn.boston.idx,] # test data
set.seed(43208)
#Leave on out cross validation:
glm.fit <- glm(crim ~ medv+lstat+rm, data = boston.trn)
coef(glm.fit)
###
lm.fit <- lm(crim ~ medv+lstat+rm, data = boston.trn)
coef(lm.fit)
###
glm.fit <- glm(crim ~ medv+lstat+rm, data = boston.trn)
cv.err <- cv.glm(boston.trn, glm.fit)
cv.err$delta[1]
set.seed(43208)
#Leave on out cross validation:
glm.fit <- glm(crim ~ medv+lstat+rm, data = boston.trn)
#coef(glm.fit)
###
lm.fit <- lm(crim ~ medv+lstat+rm, data = boston.trn)
#coef(lm.fit)
###
glm.fit <- glm(crim ~ medv+lstat+rm, data = boston.trn)
cv.err <- cv.glm(boston.trn, glm.fit)
cv.err$delta[1]
set.seed(43208)
#5 fold cv
glm.fit <- glm(crim ~ medv+lstat+rm, data = boston.trn)
cv.glm(boston.trn, glm.fit, K = 5)$delta[1]
set.seed(43208)
#10 fold cv
glm.fit <- glm(crim ~ medv+lstat+rm, data = boston.trn)
cv.glm(boston.trn, glm.fit, K = 10)$delta[1]
library(tree)
Boston_org<-Boston
#control=tree.control(nobs=nrow(boston.trn),mindev=0)
set.seed(43208)
tree.boston <- tree(formula = crim~., data = boston.trn, control=tree.control(nobs=nrow(boston.trn),mindev=0))
###
set.seed(43208)
cv.boston <- cv.tree(tree.boston)
plot(cv.boston$k, cv.boston$dev, type = "b")
plot(cv.boston$size, cv.boston$dev, type = "b")
###
prune.boston <- prune.tree(tree.boston, best = 7)
plot(prune.boston)
text(prune.boston, pretty = 0)
yhat <- predict(prune.boston, newdata = boston.tst)
sqrt(mean((yhat - boston.tst$crim)^2))
x=c(42, 45, 38, 35, 49, 28, 44, 40, 45, 42)
y=c(126, 145, 112, 107, 144,  83, 129, 119, 131, 127)
data=tibble(x,y)
data %>%
kable() %>%
kable_styling(full_width = FALSE)
alpha.fn <- function(data, index) {
X <- data$x[index]
Y <- data$y[index]
#(var(Y) - cov(X, Y)) / (var(X) + var(Y) - 2 * cov(X, Y))
return(c(mean(X), mean(Y), cov(X,Y)))
}
###
alpha.fn(data, 1:10)
###
alpha.fn(data, sample(10, 10, replace = T))
###
res_boot<-boot(data, alpha.fn, R = 1000)
mean(res_boot$t[,1])
mean(res_boot$t[,2])
mean(res_boot$t[,3])
boot.fn <- function(data, index){
coef(lm(y ~ x, data = data, subset = index))
}
boot.fn(data, 1:10)
boot(data, boot.fn, 1000)
NI_1_ProgInt<-read_csv("Melted_Prog_DF_NI_1-R2T.csv")
library(tidyverse)
library(ggplot2)
library(scales)
library(forcats)
setwd("C:/Users/gareyes3/Box/CPS Project- Farm to Facility/Papers/CSV Data/Review 2")
#setwd("C:/Users/reyes/Box Sync/CPS Project- Farm to Facility/Papers/CSV Data")
#setwd("C:/Users/gareyes3/Box/CPS Project- Farm to Facility/Papers/CSV Data")
#setwd("C:/Users/Gustavo Reyes/Box/CPS Project- Farm to Facility/Papers/CSV Data/Review 2")
NI_1_ProgInt<-read_csv("Melted_Prog_DF_NI_1-R2T.csv")
NI_2_ProgInt<-read_csv("Melted_Prog_DF_NI_2-R2T.csv")
NI_3_ProgInt<-read_csv("Melted_Prog_DF_NI_3-R2T.csv")
order_progression<-unique(NI_1_ProgInt$variable) #getting exact order of events
#Function for Calculating the 95% confidence interval for the means.
margin_calc<-function(x){
margin <- qt(0.975,df=1000-1)*sd(x)/sqrt(1000)
}
#random
NI_Summ<-NI_1_ProgInt %>%
group_by(Type,variable ) %>%
summarize(mean= mean(value),h95 =mean + margin_calc(value),l95 =mean - margin_calc(value)) %>%
mutate(ContScen = "Random Contamination") %>%
drop_na()
#10%
NI_Summ_3<-NI_3_ProgInt %>%
group_by(Type,variable ) %>%
summarize(mean= mean(value),h95 =mean + margin_calc(value),l95 =mean - margin_calc(value)) %>%
mutate(ContScen = "10% Clustered Contamination") %>%
drop_na()
#1%
NI_Summ_2<-NI_2_ProgInt %>%
group_by(Type,variable ) %>%
summarize(mean= mean(value),h95 =mean + margin_calc(value),l95 =mean - margin_calc(value)) %>%
mutate(ContScen = "1% Clustered Contamination") %>%
drop_na()
#Getting Summary Stats. for intervention effect.
#log changes.
1.59e+3
NI_Summ %>%
filter(variable == "After CS Samp") %>%
mutate(logchange= log10(mean/1590),
logchange95l = log10(h95/1590),
logchange95h = log10(l95/1590)
)
Binded_all<-bind_rows(NI_Summ,NI_Summ_3,NI_Summ_2)
#Updating Intervention Names:
Binded_all$Type<-str_replace("BaselineAI", string = Binded_all$Type, replacement = "Baseline All-Intervention")
Binded_all$Type<-str_replace("BaselineNI", string = Binded_all$Type, replacement = "Baseline No-Intervention")
Binded_all$Type<-str_replace("Holding", string = Binded_all$Type, replacement = "Preharvest Holding")
Binded_all$Type<-str_replace("PreSpray_Wash", string = Binded_all$Type, replacement = "Prewash")
Binded_all$Type<-str_replace("Washing", string = Binded_all$Type, replacement = "Chlorinated Wash")
#fixing the word preharvest
Binded_all$variable<-str_replace("Pre-Harvest", string = Binded_all$variable, replacement = "Preharvest")
order_progression2<-str_replace("Pre-Harvest", string = order_progression, replacement = "Preharvest")
Binded_all$variable<-factor(Binded_all$variable, levels=order_progression2)
Binded_all$ContScen<-factor(Binded_all$ContScen, levels=c("Random Contamination","10% Clustered Contamination","1% Clustered Contamination"))
ggplot(data= Binded_all, aes(x= variable,y = mean, group= Type, color = Type, linetype=Type, fill = Type))+
geom_line(size = 0.75)+
geom_ribbon(aes(ymin = l95, ymax = h95), alpha = 0.2)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(text = element_text(size=24))+
scale_y_continuous(trans='log10',
labels = trans_format("log10", math_format(10^.x)))+
labs(y= "Total Adulterant Cells in System", x="Process Stage")+
#ggtitle("1) Random Contamination")+
facet_wrap(~ ContScen, ncol = 3)+
labs(color = "Interventions", fill = "Interventions", linetype = "Interventions")+
theme_bw()
ggsave("Contamination_Progression.tiff", width = 45, height = 25, units = "cm", dpi = 600)
Cont_Samp_Point_Binded<-read_csv("ContSampPoint.csv")
Order_ConS<-unique(Cont_Samp_Point_Binded$variable)
Cont_Samp_Point_Binded$variable<-factor(Cont_Samp_Point_Binded$variable, levels=Order_ConS)
Cont_Samp_Point_Binded$`Cont Scenario`<-factor(Cont_Samp_Point_Binded$`Cont Scenario`, levels = c("Random Uniform", "10% Cluster", "1% Cluster"))
Cont_Samp_Point_Binded$Process<-factor(Cont_Samp_Point_Binded$Process, levels = c("No Intervention","Holding Only","PreCooling Only","Sanitation Only", "PreWash Only","Washing Only" , "All Intervention"))
ggplot(data = Cont_Samp_Point_Binded, aes(x = variable, y =value, fill = `Cont Scenario`))+
geom_boxplot()+
scale_y_continuous(trans='log10',
labels = trans_format("log10", math_format(10^.x)))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(text = element_text(size=24), legend.text=element_text(size=18),legend.title=element_text(size=22))+
labs(x= "Sampling Step", y = "Total Adulterant Cells in System")+
facet_wrap(~Process)+
scale_fill_discrete(name = "Contamination Scenario")
ggplot(data = Cont_Samp_Point_Binded, aes(x = variable, y =value, fill = `Cont Scenario`))+
geom_boxplot()+
scale_y_continuous(trans='log10',
labels = trans_format("log10", math_format(10^.x)))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(text = element_text(size=24), legend.text=element_text(size=18),legend.title=element_text(size=22))+
labs(x= "Sampling Step", y = "Total Adulterant Cells in System")+
facet_wrap(~Process)+
scale_fill_discrete(name = "Contamination Scenario")+
theme_bw()
ggplot(data = Cont_Samp_Point_Binded, aes(x = variable, y =value, fill = `Cont Scenario`))+
geom_boxplot()+
scale_y_continuous(trans='log10',
labels = trans_format("log10", math_format(10^.x)))+
labs(x= "Sampling Step", y = "Total Adulterant Cells in System")+
facet_wrap(~Process)+
scale_fill_discrete(name = "Contamination Scenario")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(text = element_text(size=24), legend.text=element_text(size=18),legend.title=element_text(size=22))
ggsave("Cont_Sampling Point.tiff", width = 40, height = 30, units = "cm", dpi = 600)
ggplot(data= Binded_all, aes(x= variable,y = mean, group= Type, color = Type, linetype=Type, fill = Type))+
geom_line(size = 0.75)+
geom_ribbon(aes(ymin = l95, ymax = h95), alpha = 0.2)+
scale_y_continuous(trans='log10',
labels = trans_format("log10", math_format(10^.x)))+
labs(y= "Total Adulterant Cells in System", x="Process Stage")+
#ggtitle("1) Random Contamination")+
facet_wrap(~ ContScen, ncol = 3)+
labs(color = "Interventions", fill = "Interventions", linetype = "Interventions")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(text = element_text(size=24))
ggsave("Contamination_Progression.tiff", width = 45, height = 25, units = "cm", dpi = 600)
FSdf<-read_csv("FSdf-Final.csv")
hline_data <- data.frame(y = c(-3.40,0,-0.785689788,0.123961982,-1.250976121,-0.012333977,
-1.27982526), System = factor(c("Baseline  AI", "Baseline NI", "Holding Only", "Precooling Only", "PreWash Only", "Sanitation Only", "Washing Only")),
stringsAsFactors = FALSE)
hline_data2 <- data.frame(y = c(0),Baseline_System = factor(c("Baseline")),
stringsAsFactors = FALSE)
ggplot(data= FSdf, aes(x = fct_reorder(Name, abs(FS)), y = FS, fill = System))+
geom_col()+
coord_flip()+
facet_wrap(~System,scales = "free_y")  +
ylab("Factor Sensitivity Index")+
xlab("Scenario or Intervention")+
geom_hline(data = hline_data, aes(yintercept = y, linetype = System),size =1.5)+
#geom_hline(data = hline_data2, aes(yintercept = y, linetype = Baseline_System),size =2, color = "red")+
geom_hline(aes(yintercept = 0),size =1.5, color = "red", alpha = 0.5)
ggplot(data= FSdf, aes(x = fct_reorder(Name, abs(FS)), y = FS, fill = System))+
geom_col()+
coord_flip()+
facet_wrap(~System,scales = "free_y")  +
ylab("Factor Sensitivity Index")+
xlab("Scenario or Intervention")+
geom_hline(data = hline_data, aes(yintercept = y, linetype = System),size =1.5)+
#geom_hline(data = hline_data2, aes(yintercept = y, linetype = Baseline_System),size =2, color = "red")+
geom_hline(aes(yintercept = 0),size =1.5, color = "red", alpha = 0.5)+
theme_bw()
ggsave("FS-R2.png", width = 40, height = 30, units = "cm", dpi = 600)
ggplot(data= FSdf, aes(x = fct_reorder(Name, abs(FS)), y = FS, fill = System))+
geom_col()+
coord_flip()+
facet_wrap(~System,scales = "free_y")  +
ylab("Factor Sensitivity Index")+
xlab("Scenario or Intervention")+
geom_hline(data = hline_data, aes(yintercept = y, linetype = System),size =1.5)+
#geom_hline(data = hline_data2, aes(yintercept = y, linetype = Baseline_System),size =2, color = "red")+
geom_hline(aes(yintercept = 0),size =1.5, color = "red", alpha = 0.5)+
theme_bw()+
theme(text = element_text(size=26), axis.text = element_text(size = 26))+
theme(legend.text=element_text(size=18),legend.title=element_text(size=18))
ggsave("FS-R2.png", width = 40, height = 30, units = "cm", dpi = 600)
ggplot(data= FSdf, aes(x = fct_reorder(Name, abs(FS)), y = FS, fill = System))+
geom_col()+
coord_flip()+
facet_wrap(~System,scales = "free_y")  +
ylab("Factor Sensitivity Index")+
xlab("Scenario or Intervention")+
geom_hline(data = hline_data, aes(yintercept = y, linetype = System),size =1.5)+
#geom_hline(data = hline_data2, aes(yintercept = y, linetype = Baseline_System),size =2, color = "red")+
geom_hline(aes(yintercept = 0),size =1.5, color = "red", alpha = 0.5)+
theme_bw()
ggsave("FS-R2.png", width = 35, height = 30, units = "cm", dpi = 600)
ggplot(data= FSdf, aes(x = fct_reorder(Name, abs(FS)), y = FS, fill = System))+
geom_col()+
coord_flip()+
facet_wrap(~System,scales = "free_y")  +
ylab("Factor Sensitivity Index")+
xlab("Scenario or Intervention")+
geom_hline(data = hline_data, aes(yintercept = y, linetype = System),size =1.5)+
#geom_hline(data = hline_data2, aes(yintercept = y, linetype = Baseline_System),size =2, color = "red")+
geom_hline(aes(yintercept = 0),size =1.5, color = "red", alpha = 0.5)+
theme_bw()
ggsave("FS-R2.png", width = 45, height = 30, units = "cm", dpi = 600)
View(FSdf)
hline_data <- data.frame(y = c(-3.41,0,-0.805564771,0.015250639
,-1.250976121,-0.012333977,
-1.320045958), System = factor(c("Baseline  AI", "Baseline NI", "Holding Only", "Precooling Only", "PreWash Only", "Sanitation Only", "Washing Only")),
stringsAsFactors = FALSE)
hline_data2 <- data.frame(y = c(0),Baseline_System = factor(c("Baseline")),
stringsAsFactors = FALSE)
ggplot(data= FSdf, aes(x = fct_reorder(Name, abs(FS)), y = FS, fill = System))+
geom_col()+
coord_flip()+
facet_wrap(~System,scales = "free_y")  +
ylab("Factor Sensitivity Index")+
xlab("Scenario or Intervention")+
geom_hline(data = hline_data, aes(yintercept = y, linetype = System),size =1.5)+
#geom_hline(data = hline_data2, aes(yintercept = y, linetype = Baseline_System),size =2, color = "red")+
geom_hline(aes(yintercept = 0),size =1.5, color = "red", alpha = 0.5)+
theme_bw()
ggsave("FS-R2.png", width = 45, height = 30, units = "cm", dpi = 600)
ggplot(data= FSdf, aes(x = fct_reorder(Name, abs(FS)), y = FS, fill = System))+
geom_col()+
coord_flip()+
facet_wrap(~System,scales = "free_y")  +
ylab("Factor Sensitivity Index")+
xlab("Scenario or Intervention")+
geom_hline(data = hline_data, aes(yintercept = y, linetype = System),size =1.5)+
#geom_hline(data = hline_data2, aes(yintercept = y, linetype = Baseline_System),size =2, color = "red")+
geom_hline(aes(yintercept = 0),size =1.5, color = "red", alpha = 0.5)+
theme_bw()
ggplot(data= FSdf, aes(x = fct_reorder(Name, abs(FS)), y = FS, fill = System))+
geom_col()+
coord_flip()+
facet_wrap(~System,scales = "free_y")  +
ylab("Factor Sensitivity Index")+
xlab("Scenario or Intervention")+
geom_hline(data = hline_data, aes(yintercept = y, linetype = System),size =1.5)+
#geom_hline(data = hline_data2, aes(yintercept = y, linetype = Baseline_System),size =2, color = "red")+
geom_hline(aes(yintercept = 0),size =1.5, color = "red", alpha = 0.5)+
theme_bw()+
theme(text = element_text(size=14), axis.text = element_text(size = 14))+
theme(legend.text=element_text(size=18),legend.title=element_text(size=18))
ggsave("FS-R2.png", width = 45, height = 30, units = "cm", dpi = 600)
ggplot(data= FSdf, aes(x = fct_reorder(Name, abs(FS)), y = FS, fill = System))+
geom_col()+
coord_flip()+
facet_wrap(~System,scales = "free_y")  +
ylab("Factor Sensitivity Index")+
xlab("Scenario or Intervention")+
geom_hline(data = hline_data, aes(yintercept = y, linetype = System),size =1.5)+
#geom_hline(data = hline_data2, aes(yintercept = y, linetype = Baseline_System),size =2, color = "red")+
geom_hline(aes(yintercept = 0),size =1.5, color = "red", alpha = 0.5)+
theme_bw()+
theme(text = element_text(size=16), axis.text = element_text(size = 16))+
theme(legend.text=element_text(size=18),legend.title=element_text(size=18))
ggsave("FS-R2.png", width = 45, height = 30, units = "cm", dpi = 600)
ggplot(data= FSdf, aes(x = fct_reorder(Name, abs(FS)), y = FS, fill = System))+
geom_col()+
coord_flip()+
facet_wrap(~System,scales = "free_y")  +
ylab("Factor Sensitivity Index")+
xlab("Scenario or Intervention")+
geom_hline(data = hline_data, aes(yintercept = y, linetype = System),size =1.5)+
#geom_hline(data = hline_data2, aes(yintercept = y, linetype = Baseline_System),size =2, color = "red")+
geom_hline(aes(yintercept = 0),size =1.5, color = "red", alpha = 0.5)+
theme_bw()+
theme(text = element_text(size=16), axis.text = element_text(size = 16))+
theme(legend.text=element_text(size=20),legend.title=element_text(size=20))
ggsave("FS-R2.png", width = 45, height = 30, units = "cm", dpi = 600)
